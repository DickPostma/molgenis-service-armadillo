plugins {
    id "jacoco"
    id "java"
    id "com.diffplug.spotless" version "6.15.0" apply false
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

repositories {
    maven {
        url 'https://repo1.maven.org/maven2'
    }
    mavenCentral()
}

bootJar.enabled = false

dependencies {
    //spring
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.retry:spring-retry'

    //other
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.rosuda.REngine:REngine:2.1.0'
    implementation 'org.rosuda.REngine:Rserve:1.8.1'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.google.auto.value:auto-value-annotations:1.10.1'
    implementation 'org.apache.commons:commons-text:1.10.0'

    //test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-core'

    //annotation
    annotationProcessor "com.google.auto.value:auto-value:1.10.1"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.7.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jar {
    reproducibleFileOrder = true
    manifest {
        attributes(
                'Specification-Version': project.version.toString(),
                'Implementation-Version': getGitHash(),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors() / 2
    failFast true
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}


